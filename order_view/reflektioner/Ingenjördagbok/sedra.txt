Uppstart: 
Efter att ha läst instruktionerna till uppgiften började vi med att bestämma oss vilken konfigurationshanteringssystem vi ska använda oss av.
Då vi alla är nybörjare valde vi GitHub som verkade enklast. 
Vad gäller utvecklingsmiljö så valde vi VisualStudioCode då vi har börjat använda det i python kursen och vi kan lite om den redan.
Vi testade nu därför att göra commits och filer i VisualStudioCode.
Vår plan var att börja träna och sedan bestämma hur vi ska göra arbetet.
Vi övade på lite GitHub genom övningarna. 
Vi tränade på att göra :
-Repository(mappen som kommer innehålla hela projektet).
-Commits(spara ändringar som vi gör), 
-Push(publicera ändringar som vi gör), 
-Pull(ta emot ändringar som andra har gjort),
-Merge(kombinera ändringar från olika brancher),
-Brancher(olika grenar att göra arbetet i),
-Clone(skapa en lokal kopia ev en projekt på Github)
-Lösa konflikter som uppstår manuellt.

Planering: 
Det första vi gjorde är att skapa en ny repository för vår projekt och klona den.
Vi skapade de filerna som behövdes. 
Vi installerade ett npm paket.
Vi bestämde oss att använda oss av javaScript som programmeringsspråk.
Vi valde menyn och bestämde att det bara ska vara 5 burgare, för att börja enkelt. Därför gjorde vi inte en planerings mapp.

Commits:
Jag började med att göra en API till vår restaurang GitBurer.
Ett fel vi gjorde i början var att vi gjorde en API till varje burgare i menyn då vi trodde att varje burgare skulle ha en egen sida och egen api.
Dock upptäckte vi såsmåningom att det inte behövdes och att databaser skulle koppla alltihoppa och därför tog vi bort de onödiga filerna och API.

Inom arbetet var mitt ansvar göra en burger info api, som möjliggör att vi kan hämta id information om burgaren samt ingredienserna:
-Jag skapade en route för att visa information om en viss burgare.
-Jag skrev funktioner för att hämta hamburgarens information och ingredienser från databasen.
-Jag exporterade informationen så att det kan användas i andra delar av applikationen.

Jag la till en service för att hämta orders for kitchen, som hämtar alla aktuella beställningar:
-Jag skapade en funktion getOorders för att hämta alla ordrar från databasen.
-För varje order hämtade jag tillhörande orderatiklar och deras ingredienser.
-Slutligen exporterade jag funktionen så att det kan användas i andra delar av funktionen.

Jag la till en API för att hämta beställningar för kitchen view och la till en kitchen view frontend:
-Jag skapade en route för att hämta och visa ordrar på startsidan.
-Jag startade servers på port 1338.
-Jag skapade en EJS-mall för att visa ordrarna.

Vi hann inte göra en debug-session och förstod inte mycket vad det innebar, dock lärde vi oss:
"Continue": Förtsätt köra programmet tills nästa brytpunkt, stanna inte i nån steg
"Step over": exekvera detta steg och fortsätt debugga nästa rad
"Step into": exekvera detta steg djupare till exempel hoppa in i funktionen (om det finns)
"Step out": lämna funktionen och hoppa till nästa steg

Reflektion:
Vi hade lite svårt i början med det mesta. Då vi alla i gruppen hade ingen erfarenhet eller bakgrund i detta så hade vi svårt att
kunna börja eller förstå. För att lösa det sökte vi på förklaringar på nätet för att kunna förstå bättre, det mesta av inlämningstiden gick
på att plugga och lära sig om de olika delarna som man behöver kunna för att lösa uppgiften.
Vi frågade även äldre senior elever för lite råd ibland. Vilket var väldigt hjälpsamt.

I början hade vi många problem med konflikter i GitHub. När vi lärde oss använda oss av brancher på rätt sätt gick det mycket bättre.
Något annat som vi hade lite svårt med var testing och debugging, vi tyckte det var väldigt utmanande för några som inte hade någon koll på det alls.
Vi sökte mycket och i slut ändan försökte göra det enkelt. 

Vi delade arbetet på oss fem men fokuserade på att vi alla ska kunna det mesta om allt. 
Sammarbetet gick väldigt bra då alla bidrog till hjälp. Plus att vi nästan alltid arbetade på samma plats för att kunna vara tillgängliga.

Dock tyckte jag att denna projektet hjälpte mig mycket att utveckla mina kunskaper inom konfigurationshantering. Jag kan nu mycket mer om
git och github, jag lärde mig lite css, API, html och javascript. Jag lärde mig ävem om databaser och docker. Jag bildade alltså en grund inom mjukvaruutveckling. 